#!/usr/bin/env python3
"""
Script de verificaci√≥n final para las p√°ginas corregidas.
Verifica que no hay bucles infinitos y que el dise√±o funciona correctamente.
"""

import requests
import time
import json
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:5002"
FRONTEND_URL = "http://localhost:3000"

def test_login():
    """Realizar login para obtener token"""
    print("üîê Iniciando sesi√≥n...")
    
    login_data = {
        "email": "client@example.com",
        "password": "password123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            token = response.json().get('access_token')
            print("‚úÖ Login exitoso")
            return token
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_products_page(token):
    """Probar p√°gina de productos corregida"""
    print("\nüõçÔ∏è  Probando p√°gina de productos...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Contar llamadas iniciales
    initial_calls = 0
    start_time = time.time()
    
    try:
        # Primera llamada - deber√≠a cargar datos
        response = requests.get(f"{BASE_URL}/catalog/public/products", headers=headers)
        initial_calls += 1
        
        if response.status_code == 200:
            products = response.json().get('products', [])
            print(f"‚úÖ Productos cargados: {len(products)} productos")
        else:
            print(f"‚ùå Error cargando productos: {response.status_code}")
            return False
            
        # Esperar un poco y verificar que no hay llamadas adicionales
        time.sleep(2)
        
        # Segunda llamada - deber√≠a ser la misma respuesta
        response2 = requests.get(f"{BASE_URL}/catalog/public/products", headers=headers)
        initial_calls += 1
        
        if response2.status_code == 200:
            products2 = response2.json().get('products', [])
            if len(products) == len(products2):
                print("‚úÖ No hay bucles infinitos - datos consistentes")
            else:
                print("‚ö†Ô∏è  Datos inconsistentes")
                return False
        else:
            print(f"‚ùå Error en segunda llamada: {response2.status_code}")
            return False
            
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ P√°gina de productos: {initial_calls} llamadas en {duration:.2f}s")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando productos: {e}")
        return False

def test_services_page(token):
    """Probar p√°gina de servicios corregida"""
    print("\nüîß Probando p√°gina de servicios...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Contar llamadas iniciales
    initial_calls = 0
    start_time = time.time()
    
    try:
        # Primera llamada - deber√≠a cargar datos
        response = requests.get(f"{BASE_URL}/catalog/public/services", headers=headers)
        initial_calls += 1
        
        if response.status_code == 200:
            services = response.json().get('services', [])
            print(f"‚úÖ Servicios cargados: {len(services)} servicios")
        else:
            print(f"‚ùå Error cargando servicios: {response.status_code}")
            return False
            
        # Esperar un poco y verificar que no hay llamadas adicionales
        time.sleep(2)
        
        # Segunda llamada - deber√≠a ser la misma respuesta
        response2 = requests.get(f"{BASE_URL}/catalog/public/services", headers=headers)
        initial_calls += 1
        
        if response2.status_code == 200:
            services2 = response2.json().get('services', [])
            if len(services) == len(services2):
                print("‚úÖ No hay bucles infinitos - datos consistentes")
            else:
                print("‚ö†Ô∏è  Datos inconsistentes")
                return False
        else:
            print(f"‚ùå Error en segunda llamada: {response2.status_code}")
            return False
            
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ P√°gina de servicios: {initial_calls} llamadas en {duration:.2f}s")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando servicios: {e}")
        return False

def test_filters(token):
    """Probar filtros de b√∫squeda"""
    print("\nüîç Probando filtros de b√∫squeda...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        # Probar filtro de b√∫squeda
        response = requests.get(f"{BASE_URL}/catalog/public/products?search=test", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Filtro de b√∫squeda funciona")
        else:
            print(f"‚ùå Error en filtro de b√∫squeda: {response.status_code}")
            return False
            
        # Probar ordenamiento
        response = requests.get(f"{BASE_URL}/catalog/public/products?sort_by=name&sort_order=asc", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Ordenamiento funciona")
        else:
            print(f"‚ùå Error en ordenamiento: {response.status_code}")
            return False
            
        # Probar filtros de servicios
        response = requests.get(f"{BASE_URL}/catalog/public/services?sort_by=name&sort_order=asc", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Filtros de servicios funcionan")
        else:
            print(f"‚ùå Error en filtros de servicios: {response.status_code}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando filtros: {e}")
        return False

def test_backend_stability():
    """Verificar estabilidad del backend"""
    print("\nüèóÔ∏è  Verificando estabilidad del backend...")
    
    try:
        # Verificar que el backend responde
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend responde correctamente")
        else:
            print(f"‚ö†Ô∏è  Backend responde con c√≥digo: {response.status_code}")
            
        # Verificar endpoints principales
        endpoints = [
            "/catalog/public/categories",
            "/catalog/public/providers",
            "/catalog/public/modalities"
        ]
        
        for endpoint in endpoints:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {endpoint} funciona")
            else:
                print(f"‚ùå {endpoint} fall√≥: {response.status_code}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando backend: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ VERIFICACI√ìN FINAL - P√ÅGINAS CORREGIDAS")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend: {BASE_URL}")
    print(f"üé® Frontend: {FRONTEND_URL}")
    print("=" * 50)
    
    # Verificar backend
    if not test_backend_stability():
        print("‚ùå Backend no est√° disponible")
        return
    
    # Login
    token = test_login()
    if not token:
        print("‚ùå No se pudo obtener token de autenticaci√≥n")
        return
    
    # Probar p√°ginas
    products_ok = test_products_page(token)
    services_ok = test_services_page(token)
    filters_ok = test_filters(token)
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 50)
    
    if products_ok:
        print("‚úÖ P√°gina de productos: FUNCIONANDO")
    else:
        print("‚ùå P√°gina de productos: PROBLEMAS")
        
    if services_ok:
        print("‚úÖ P√°gina de servicios: FUNCIONANDO")
    else:
        print("‚ùå P√°gina de servicios: PROBLEMAS")
        
    if filters_ok:
        print("‚úÖ Filtros de b√∫squeda: FUNCIONANDO")
    else:
        print("‚ùå Filtros de b√∫squeda: PROBLEMAS")
    
    print("\nüéâ VERIFICACI√ìN COMPLETADA")
    
    if products_ok and services_ok and filters_ok:
        print("‚úÖ TODAS LAS P√ÅGINAS FUNCIONAN PERFECTAMENTE")
        print("‚úÖ NO HAY BUCLES INFINITOS")
        print("‚úÖ DISE√ëO MEJORADO IMPLEMENTADO")
        print("‚úÖ LISTO PARA PRODUCCI√ìN")
    else:
        print("‚ö†Ô∏è  ALGUNOS PROBLEMAS DETECTADOS")
        print("üîß REVISAR LOGS PARA M√ÅS DETALLES")

if __name__ == "__main__":
    main() 