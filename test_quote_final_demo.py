#!/usr/bin/env python3
"""
Demo final del flujo de cotizaciones que funciona:
1. Cliente solicita cotizaci√≥n
2. Cliente ve sus cotizaciones
3. Proveedor ve cotizaciones recibidas
4. Proveedor responde (endpoint b√°sico)
"""

import requests
import json
import time

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:5002"

def test_login(email, password):
    """Realizar login y obtener token"""
    print(f"üîê Iniciando sesi√≥n como {email}...")
    
    login_data = {
        "email": email,
        "password": password
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            token = response.json().get('access_token')
            user = response.json().get('user', {})
            print(f"‚úÖ Login exitoso - Usuario: {user.get('full_name', 'N/A')} (ID: {user.get('id', 'N/A')})")
            return token, user
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            return None, None
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None, None

def test_create_quote_request(client_token, provider_id=1, item_id=1):
    """Crear una solicitud de cotizaci√≥n"""
    print(f"\nüìã Creando solicitud de cotizaci√≥n...")
    
    headers = {'Authorization': f'Bearer {client_token}'}
    
    quote_data = {
        "provider_id": provider_id,
        "item_id": item_id,
        "item_type": "producto",
        "quantity": 25,
        "message": "Cotizaci√≥n para proyecto industrial. Requiero especificaciones t√©cnicas detalladas, tiempo de entrega, garant√≠a y soporte post-venta."
    }
    
    try:
        response = requests.post(f"{BASE_URL}/quotes/request", json=quote_data, headers=headers)
        if response.status_code == 201:
            quote = response.json().get('quote_request', {})
            quote_id = quote.get('id')
            print(f"‚úÖ Cotizaci√≥n creada exitosamente - ID: {quote_id}")
            print(f"   Estado: {quote.get('status', 'N/A')}")
            print(f"   Producto: {quote.get('item_name', 'N/A')}")
            print(f"   Cantidad: {quote.get('quantity', 'N/A')}")
            print(f"   Mensaje: {quote.get('message', 'N/A')}")
            return quote_id
        else:
            print(f"‚ùå Error creando cotizaci√≥n: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_client_view_quotes(client_token):
    """Cliente ve sus cotizaciones"""
    print(f"\nüìã Cliente viendo sus cotizaciones...")
    
    headers = {'Authorization': f'Bearer {client_token}'}
    
    try:
        response = requests.get(f"{BASE_URL}/quotes/my-requests", headers=headers)
        if response.status_code == 200:
            data = response.json()
            quotes = data.get('quote_requests', [])
            print(f"‚úÖ Cotizaciones obtenidas: {len(quotes)}")
            
            # Mostrar solo las √∫ltimas 3
            recent_quotes = quotes[:3]
            for quote in recent_quotes:
                print(f"   üìã ID: {quote.get('id')} - Estado: {quote.get('status')}")
                print(f"      Proveedor: {quote.get('provider_name', 'N/A')}")
                print(f"      Producto: {quote.get('item_name', 'N/A')}")
                print(f"      Cantidad: {quote.get('quantity', 'N/A')}")
                print(f"      Fecha: {quote.get('created_at', 'N/A')}")
                print()
            
            return quotes
        else:
            print(f"‚ùå Error obteniendo cotizaciones: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_provider_view_received_quotes(provider_token):
    """Proveedor ve cotizaciones recibidas"""
    print(f"\nüë®‚Äçüíº Proveedor viendo cotizaciones recibidas...")
    
    headers = {'Authorization': f'Bearer {provider_token}'}
    
    try:
        response = requests.get(f"{BASE_URL}/quotes/received", headers=headers)
        if response.status_code == 200:
            data = response.json()
            quotes = data.get('quote_requests', [])
            print(f"‚úÖ Cotizaciones recibidas: {len(quotes)}")
            
            # Mostrar solo las √∫ltimas 3
            recent_quotes = quotes[:3]
            for quote in recent_quotes:
                print(f"   üìã ID: {quote.get('id')} - Estado: {quote.get('status')}")
                print(f"      Cliente: {quote.get('client_name', 'N/A')}")
                print(f"      Producto: {quote.get('item_name', 'N/A')}")
                print(f"      Cantidad: {quote.get('quantity', 'N/A')}")
                print(f"      Mensaje: {quote.get('message', 'N/A')[:50]}...")
                print(f"      Fecha: {quote.get('created_at', 'N/A')}")
                print()
            
            return quotes
        else:
            print(f"‚ùå Error obteniendo cotizaciones: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_provider_basic_response(provider_token, quote_id):
    """Proveedor responde b√°sicamente a la cotizaci√≥n"""
    print(f"\nüíº Proveedor enviando respuesta b√°sica a cotizaci√≥n {quote_id}...")
    
    headers = {'Authorization': f'Bearer {provider_token}'}
    
    response_data = {
        "response_message": "Cotizaci√≥n en proceso. Enviaremos propuesta detallada en las pr√≥ximas 24 horas."
    }
    
    try:
        response = requests.post(f"{BASE_URL}/quotes/{quote_id}/respond", 
                               json=response_data, headers=headers)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Respuesta enviada exitosamente")
            print(f"   Mensaje: {result.get('message', 'N/A')}")
            print(f"   Quote ID: {result.get('quote_id', 'N/A')}")
            return True
        else:
            print(f"‚ùå Error enviando respuesta: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de demo"""
    print("üöÄ DEMO FINAL - FLUJO DE COTIZACIONES")
    print("=" * 60)
    
    # Login como cliente
    client_token, client_user = test_login("cliente1@mineraandes.cl", "password123")
    if not client_token:
        print("‚ùå No se pudo obtener token de cliente")
        return
    
    # Login como proveedor
    provider_token, provider_user = test_login("juan.perez@solucioneshidraulicas.cl", "password123")
    if not provider_token:
        print("‚ùå No se pudo obtener token de proveedor")
        return
    
    # 1. Cliente crea cotizaci√≥n
    quote_id = test_create_quote_request(client_token)
    if not quote_id:
        print("‚ùå No se pudo crear la cotizaci√≥n")
        return
    
    # 2. Cliente ve sus cotizaciones
    client_quotes = test_client_view_quotes(client_token)
    if not client_quotes:
        print("‚ùå No se pudieron obtener las cotizaciones del cliente")
        return
    
    # 3. Proveedor ve cotizaciones recibidas
    provider_quotes = test_provider_view_received_quotes(provider_token)
    if not provider_quotes:
        print("‚ùå No se pudieron obtener las cotizaciones del proveedor")
        return
    
    # 4. Proveedor responde b√°sicamente
    response_sent = test_provider_basic_response(provider_token, quote_id)
    
    print("\n" + "=" * 60)
    print("‚úÖ DEMO COMPLETADO - FLUJO FUNCIONANDO")
    print("=" * 60)
    print("üìã Resumen del flujo:")
    print(f"   1. ‚úÖ Cotizaci√≥n creada (ID: {quote_id})")
    print(f"   2. ‚úÖ Cliente vio {len(client_quotes)} cotizaciones")
    print(f"   3. ‚úÖ Proveedor vio {len(provider_quotes)} cotizaciones")
    print(f"   4. ‚úÖ Respuesta b√°sica enviada: {'S√≠' if response_sent else 'No'}")
    
    print("\nüéâ ¬°Flujo b√°sico de cotizaciones funcionando!")
    print("\nüìù Funcionalidades que funcionan:")
    print("   ‚úÖ Creaci√≥n de cotizaciones")
    print("   ‚úÖ Visualizaci√≥n de cotizaciones (cliente)")
    print("   ‚úÖ Visualizaci√≥n de cotizaciones (proveedor)")
    print("   ‚úÖ Respuesta b√°sica del proveedor")
    
    print("\nüìù Funcionalidades que requieren correcci√≥n:")
    print("   ‚ö†Ô∏è  Subida de documentos (problema de permisos)")
    print("   ‚ö†Ô∏è  Respuestas detalladas con precio/tiempo")
    print("   ‚ö†Ô∏è  Visualizaci√≥n de detalles espec√≠ficos")

if __name__ == "__main__":
    main() 