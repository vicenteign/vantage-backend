#!/bin/bash

# Script completo para solucionar problemas de conexi√≥n en EC2
echo "üöÄ Solucionando problemas de conexi√≥n en EC2..."

# Funci√≥n para mostrar el estado actual
show_status() {
    echo "üìä Estado actual de los contenedores:"
    echo "====================================="
    docker-compose -f docker-compose.prod.yml ps
    echo ""
}

# Funci√≥n para obtener la IP p√∫blica
get_public_ip() {
    echo "üåê Obteniendo IP p√∫blica de EC2..."
    EC2_PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
    
    if [ -z "$EC2_PUBLIC_IP" ]; then
        EC2_PUBLIC_IP=$(curl -s ifconfig.me)
    fi
    
    if [ -z "$EC2_PUBLIC_IP" ]; then
        echo "‚ùå No se pudo obtener la IP p√∫blica"
        return 1
    fi
    
    echo "‚úÖ IP p√∫blica: $EC2_PUBLIC_IP"
    export EC2_PUBLIC_IP
    return 0
}

# Funci√≥n para actualizar configuraci√≥n
update_config() {
    echo "‚öôÔ∏è Actualizando configuraci√≥n..."
    
    # Actualizar .env con la IP p√∫blica
    if [ -f .env ]; then
        if grep -q "EC2_PUBLIC_IP" .env; then
            sed -i "s/EC2_PUBLIC_IP=.*/EC2_PUBLIC_IP=$EC2_PUBLIC_IP/" .env
        else
            echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> .env
        fi
        echo "‚úÖ Archivo .env actualizado"
    fi
    
    # Actualizar CORS en el backend
    echo "üîß Actualizando configuraci√≥n CORS..."
}

# Funci√≥n para reiniciar servicios
restart_services() {
    echo "üîÑ Reiniciando servicios..."
    docker-compose -f docker-compose.prod.yml down
    sleep 3
    docker-compose -f docker-compose.prod.yml up -d
    sleep 10
    echo "‚úÖ Servicios reiniciados"
}

# Funci√≥n para verificar conectividad
check_connectivity() {
    echo "üîç Verificando conectividad..."
    
    # Verificar backend local
    if curl -s http://localhost:5002/health > /dev/null 2>&1; then
        echo "‚úÖ Backend local: Funcionando"
    else
        echo "‚ùå Backend local: No responde"
        return 1
    fi
    
    # Verificar backend desde IP p√∫blica
    if curl -s http://$EC2_PUBLIC_IP:5002/health > /dev/null 2>&1; then
        echo "‚úÖ Backend p√∫blico: Funcionando"
    else
        echo "‚ùå Backend p√∫blico: No responde"
        return 1
    fi
    
    return 0
}

# Funci√≥n para mostrar informaci√≥n de conexi√≥n
show_connection_info() {
    echo ""
    echo "üåê Informaci√≥n de conexi√≥n:"
    echo "============================"
    echo "IP P√∫blica: $EC2_PUBLIC_IP"
    echo "Backend URL: http://$EC2_PUBLIC_IP:5002"
    echo "Frontend URL: http://$EC2_PUBLIC_IP:3000"
    echo "Health Check: http://$EC2_PUBLIC_IP:5002/health"
    echo ""
}

# Funci√≥n para mostrar logs de error
show_error_logs() {
    echo "üìã √öltimos logs del backend:"
    echo "============================"
    docker-compose -f docker-compose.prod.yml logs --tail=20 backend-prod
    echo ""
}

# Ejecutar el flujo principal
main() {
    # Mostrar estado inicial
    show_status
    
    # Obtener IP p√∫blica
    if ! get_public_ip; then
        echo "‚ùå No se pudo obtener la IP p√∫blica. Saliendo..."
        exit 1
    fi
    
    # Actualizar configuraci√≥n
    update_config
    
    # Reiniciar servicios
    restart_services
    
    # Verificar conectividad
    if check_connectivity; then
        echo "üéâ ¬°Problema resuelto!"
        show_connection_info
        echo "üìù Ahora puedes:"
        echo "1. Acceder al frontend: http://$EC2_PUBLIC_IP:3000"
        echo "2. Verificar el backend: http://$EC2_PUBLIC_IP:5002/health"
        echo "3. Probar el login desde el frontend"
    else
        echo "‚ùå A√∫n hay problemas de conectividad"
        show_error_logs
        echo ""
        echo "üîß Pasos adicionales:"
        echo "1. Verificar que los puertos 3000 y 5002 est√©n abiertos en el Security Group"
        echo "2. Verificar que no haya firewall bloqueando los puertos"
        echo "3. Revisar los logs del backend para m√°s detalles"
    fi
}

# Ejecutar el script principal
main 